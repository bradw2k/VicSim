<!DOCTYPE html>
<html>
<head>
    <title>Vic-20</title>
    <script type="text/javascript" src="jquery-1.7.1.min.js"></script>
    <style type="text/css">
        body 
        {
            background-color:Black;
            margin: 0px 0px 0px 0px;
        }
        div.outerScreen 
        {
            position: absolute;
            width:628px;
            height:428px;
            background-color:Aqua;
            margin: 0px 20px 20px 0px;
        }
        div.innerScreen
        {
            position: absolute;
            width:528px;
            height:368px;
            background-color:White;
            margin: 30px 50px 30px 50px;
        }
        div.char
        {
            position: absolute;
            background-image: url(petscii.png);
            background-position: 0px 0px;
            left: 0px;
            top: 0px;
            width: 768px;
            height: 16px;
        }
        #theInputxxx
        {
            position: absolute;
            left: -999px;
        }
    </style>
    <script type="text/javascript">
        var VicChar = function (xx, yy) {
            var width = 24,
                height = 16,
                imagesWidth = width * 32,
                $element = $('#innerScreen').append('<div/>').find(':last'),
                elemStyle = $element[0].style,
                mathFloor = Math.floor,
                x = xx,
                y = yy,
                current = -1,
                blinking = false,
                blinked = false;
            $element.css({
                position: 'absolute',
                width: width,
                height: height,
                backgroundImage: 'url(petscii.png)',
                display: 'none',
                left: (x * width) + 'px',
                top: (y * height) + 'px'
            });
            var that = {
                chr: function (c) {
                    if (c == undefined) {
                        return current;
                    }
                    current = c;
                    var index = current * width;
                    var vOffset = -mathFloor(index / imagesWidth) * height;
                    var hOffset = -index % imagesWidth;
                    elemStyle.backgroundPosition = hOffset + 'px ' + vOffset + 'px';

                    if (current >= 0) {
                        elemStyle.display = 'block';
                    }
                    else {
                        elemStyle.display = 'none';
                    }
                },
                blink: function (mode) {
                    if (mode == 'off') {
                        blinking = false;
                    }
                    else if (mode == 'on') {
                        blinking = true;
                        blinked = false;
                    }

                    if (!blinked && blinking) {
                        elemStyle.backgroundPosition = '0px -16px';
                        elemStyle.display = 'block';
                        blinked = true;
                    }
                    else {
                        this.chr(current);
                        blinked = false;
                    }

                    if (blinking) {
                        setTimeout($.proxy(this.blink, this), 400);
                    }
                }
            };
            return that;
        };

        function VicScreen() {
            var locs = [];
            var lineWraps = [];
            var lineLengths = [];
            var curx = 0, cury = 0;

            for (var y = 0; y < 23; y++) {
                lineWraps.push(1);
                lineLengths.push(0);
                for (var x = 0; x < 22; x++) {
                    locs.push(VicChar(x, y));
                }
            }

            var that = {
                char: function (x, y, c) {
                    if (c == undefined) {
                        return locs[x + y * 22];
                    }
                    else {
                        locs[x + y * 22].chr(c);
                    }
                },

                write: function (c) {
                    if (c === +c) {
                        this.cursor('off');
                        this.char(curx, cury, c);

                        if (curx >= lineLengths[cury]) {
                            lineLengths[cury] = curx + 1;
                        }

                        if (curx == 21) {
                            this.newline();
                        }
                        else {
                            this.cursor(curx + 1, cury);
                        }
                    }
                    else {
                        for (var i = 0; i < c.length; i++) {
                            this.write(this.char2code(c[i]));
                        }
                    }
                },

                char2code: function (ch) {
                    if (ch == '*') return 42;
                    if (ch == ',') return 44;
                    if (ch == '.') return 46;
                    if (ch == 'A') return 1;
                    if (ch == 'B') return 2;
                    if (ch == 'C') return 3;
                    if (ch == 'D') return 4;
                    if (ch == 'E') return 5;
                    if (ch == 'F') return 6;
                    if (ch == 'G') return 7;
                    if (ch == 'H') return 8;
                    if (ch == 'I') return 9;
                    if (ch == 'J') return 10;
                    if (ch == 'K') return 11;
                    if (ch == 'L') return 12;
                    if (ch == 'M') return 13;
                    if (ch == 'N') return 14;
                    if (ch == 'O') return 15;
                    if (ch == 'P') return 16;
                    if (ch == 'Q') return 17;
                    if (ch == 'R') return 18;
                    if (ch == 'S') return 19;
                    if (ch == 'T') return 20;
                    if (ch == 'U') return 21;
                    if (ch == 'V') return 22;
                    if (ch == 'W') return 23;
                    if (ch == 'X') return 24;
                    if (ch == 'Y') return 25;
                    if (ch == 'Z') return 26;
                    if (ch == '0') return 48;
                    if (ch == '1') return 49;
                    if (ch == '2') return 50;
                    if (ch == '3') return 51;
                    if (ch == '4') return 52;
                    if (ch == '5') return 53;
                    if (ch == '6') return 54;
                    if (ch == '7') return 55;
                    if (ch == '8') return 56;
                    if (ch == '9') return 57;
                    return -1;
                },

                left: function () {
                    if (curx > 0 || cury > 0) {
                        this.cursor('off');
                        if (curx == 0) {
                            curx = 21;
                            this.up();
                        }
                        else {
                            this.cursor(curx - 1, cury);
                        }
                    }
                },

                right: function () {
                    this.cursor('off');
                    if (curx == 21) {
                        curx = 0;
                        this.down();
                    }
                    else {
                        this.cursor(curx + 1, cury);
                    }
                },

                up: function () {
                    this.cursor('off');
                    if (cury > 0) {
                        cury--;
                    }
                    this.cursor(curx, cury);
                },

                down: function () {
                    this.cursor('off');
                    if (cury == 22) {
                        this.scroll();
                    }
                    this.cursor(curx, cury + 1);
                },

                insert: function () {
                    if (this.insertAt(curx, cury)) {
                        this.char(curx, cury, -1);
                    }
                },

                insertAt: function (x, y) {
                    if (lineLengths[y] == 22) {
                        if (lineWraps[y] == 4) {
                            return false;
                        }
                        if (y < 22) {
                            lineWraps[y + 1] = lineWraps[y] + 1;
                            if (this.insertAt(0, y + 1)) {
                                this.char(0, y + 1, this.char(21, y).chr());
                            }
                            else {
                                return false;
                            }
                        }
                        else {
                            return false;
                        }
                    }

                    for (var i = 21; i > x; i--) {
                        this.char(i, y, this.char(i - 1, y).chr());
                    }

                    if (lineLengths[y] < 22) {
                        lineLengths[y] = lineLengths[y] + 1;
                    }

                    return true;
                },

                backspace: function () {
                    if (curx > 0 || lineWraps[cury] > 1) {
                        this.left();
                        this.del(curx, cury);
                    }
                },

                del: function (x, y) {
                    for (var i = x; i <= 20; i++) {
                        this.char(i, y, this.char(i + 1, y).chr());
                    }

                    if (y != cury) {
                        if (lineLengths[y] == 0) {
                            this.deleteLine(y);
                            return;
                        }
                    }

                    if (y == 22) {
                        this.char(21, y, -1);
                        lineLengths[y] = lineLengths[y] - 1;
                    }
                    else if (y < 22 && lineWraps[y + 1] == 1) {
                        this.char(21, y, -1);
                        lineLengths[y] = lineLengths[y] - 1;

                        if (y != cury) {
                            if (lineLengths[y] == 0) {
                                this.deleteLine(y);
                                return;
                            }
                        }
                    }
                    else if (y < 22) {
                        this.char(21, y, this.char(0, y + 1).chr());
                        this.del(0, y + 1);
                    }
                },

                deleteLine: function (line) {
                    for (var y = line; y <= 21; y++) {
                        lineWraps[y] = lineWraps[y + 1];
                        lineLengths[y] = lineLengths[y + 1];
                        for (var x = 0; x < 22; x++) {
                            this.char(x, y, this.char(x, y + 1).chr());
                        }
                    }

                    lineWraps[22] = 1;
                    lineLengths[22] = 0;

                    for (var x = 0; x < 22; x++) {
                        this.char(x, 22, -1);
                    }
                },

                newline: function (isReturn) {
                    this.cursor('off');
                    curx = 0;

                    if (isReturn) {
                        cury++;
                        this.unwrapLine(cury, 1);
                    }
                    else {
                        var count = lineWraps[cury];

                        cury++;

                        if (count < 4) {
                            this.wrapLine(cury);
                        }
                    }


                    if (cury > 22) {
                        this.scroll();
                    }

                    this.cursor(curx, cury);
                },

                wrapLine: function (y) {
                    if (y > 23) return;

                    var count = lineWraps[y];

                    if (count == 1) {
                        lineWraps[y] = lineWraps[y - 1] + 1;
                    }
                    else {
                        this.wrapLine(y + 1);
                    }
                },

                unwrapLine: function (y, newlength) {
                    if (y > 23) return;

                    var count = lineWraps[y];

                    if (count > 1) {
                        lineWraps[y] = newlength;
                        this.unwrapLine(y + 1, newlength + 1);
                    }
                },

                scroll: function () {
                    var lines = 1;
                    if (lineWraps[3] == 4) lines = 4;
                    else if (lineWraps[2] == 3) lines = 3;
                    else if (lineWraps[1] == 2) lines = 2;

                    for (var i = 0; i < lines; i++) {
                        this.deleteLine(0);
                    }

                    cury -= lines;
                },

                current: function (x, y) {
                    locs[curx + cury * 22].blink('off');
                    curx = x % 22;
                    cury = y + ((x / 22) >> 0);
                },

                cursor: function (x, y) {
                    locs[curx + cury * 22].blink('off');
                    if (x == 'off') return;
                    this.current(x, y);
                    var ch = locs[curx + cury * 22];
                    ch.blink('on');
                },

                bootScreen: function () {
                    this.clear();
                    this.current(0, 0);
                    this.write('**** CBM BASIC V2 ****');
                    this.newline(true);
                    this.write('3583 BYTES FREE');
                    this.newline(true);
                    this.newline(true);
                    this.write('READY.');
                    this.newline(true);
                },

                restoreScreen: function () {
                    this.clear();
                    this.current(0, 1);
                    this.write('READY.');
                    this.newline(true);
                },

                clear: function () {
                    this.current(0, 0);
                    for (var y = 0; y < 23; y++) {
                        lineWraps[y] = 1;
                        lineLengths[y] = 0;
                        for (var x = 0; x < 22; x++) {
                            this.char(x, y, -1);
                        }
                    }
                }
            }

            return that;
        }

        $(document).ready(function () {
            var s = VicScreen();
            s.bootScreen();

            $('#theInput').focus();
            $('#outerScreen').keyup(function (e) {

                if (e.which == 8) {
                    // backspace
                }
                else if (e.which == 3) {
                    s.restoreScreen();
                }
                else if (e.which == 32) {
                    s.write(-1);
                }
                else if (e.which == 45) {
                    s.insert();
                }
                else if (e.which == 46) {
                    s.backspace();
                }
                else if (e.which == 13) {
                    s.newline(true);
                }
                else if (e.which == 37) {
                    s.left();
                }
                else if (e.which == 38) {
                    s.up();
                }
                else if (e.which == 39) {
                    s.right();
                }
                else if (e.which == 40) {
                    s.down();
                }
                else if (e.which == 190) {
                    s.write(46); // .
                }
                else if (e.which == 188) {
                    s.write(44); // ,
                }
                else if (e.which == 186) {
                    s.write(59); // ;
                }
                else if (e.which == 187) {
                    s.write(61); // =
                }
                else if (e.which >= 65 && e.which < 92) {
                    s.write(e.which - 64); // alpha
                }
                else if (e.which >= 48 && e.which <= 57) {
                    s.write(e.which); // digits
                }
                else if (e.which == 17 || e.which == 116) {
                }
                else {
                    alert('keypress: ' + e.which);
                }

                return true;
            });
        });
    </script>
</head>
<body>
    <div id="outerScreen" class="outerScreen">
        <div id="innerScreen" class="innerScreen">
        </div>
        <input id="theInput" type="text" />
    </div>
</body>
</html>
